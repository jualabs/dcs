node door(open_out, open_in, close, c1,c2,c3:bool) returns(opened,allow_out:bool)
let 
    automaton
        state CLOSED
            do opened=false; allow_out=false;
            unless (open_in & c1 ) or c2 then OPEN |
            c3 then UNLOCKED_OUT 
        
        state OPEN
            do opened=true; allow_out=true;
            unless (close & c1) or c2 then CLOSED |
            c3 then UNLOCKED_OUT 
            
        state UNLOCKED_OUT
            do opened=false; allow_out=true;
            unless ((open_out or open_in) & c1) or c2 then OPEN |
            c3 then CLOSED
    end
tel

node global(emergency, daybreak, presence, allowed, open_out, open_in, close:bool) returns(opened,allow_out:bool)
    contract
        var safety, security, security2,security3, security4:bool;
        let
            (* req1: n√£o abre a porta por fora, exceto quando allowed / not full_capacity *)
            (* req2: sempre abre a porta por dentro *)
            (* req3: em caso de emergencia abre a porta *)
            
            (*safety=true;
            security=true;
            security2=true;
            security3=true;*)
            security4=true;
            
            safety = not (emergency) or (opened & allow_out);
            security3 = not (allowed) or allow_out;
            security = not (not presence & not emergency) or (not opened);
            security2 = not (not allowed & not emergency) or (not opened & not allow_out);
            (*security4 = not (presence & not allowed) or (not opened & not allow_out)*)
            
        tel
        enforce safety & security & security2 & security3 & security4
        with(c1,c3,c2:bool)
let
    (opened,allow_out) = inlined door(open_out, open_in, close, c1,c2,c3);
tel