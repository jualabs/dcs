node door(open_out, open_in, close, c1, c2,c3:bool) returns(unlocked, opened:bool)
let 
    automaton
        state LOCK
            do opened=false; unlocked=false;
            unless c3 then UNLOCK |
            open_in then OPEN
        
        state UNLOCK
            do opened=false; unlocked=true;
            unless not c2 then LOCKED | 
            (open_in & c3) or (open_out & c3) or c1 then OPEN
        
        state OPEN
            do opened=true; unlocked=true;
            unless not c2 then LOCK |
            (close & not c1) or not c3 then UNLOCK 
    end
tel

node global(emergency, daybreak, presence, allowed, open_out, open_in, close:bool) returns(locked,opened:bool)
    contract
        var safety, security, security2:bool;
        let
            (* req1: n√£o abre a porta por fora, exceto quando allowed / not full_capacity *)
            (* req2: sempre abre a porta por dentro *)
            (* req3: em caso de emergencia abre a porta *)
            safety = not (emergency) or opened;
            security = not (presence) or not locked;
            security2 = not (allowed) or not locked;
        tel
        enforce safety & security & security2
        with(c1,c2,c3:bool)
let
    (locked,opened) = inlined door(open_out, open_in, close, c1, c2,c3);
tel