node fail (failed, recover : bool) returns (f : bool)
	let
		automaton

			state Funcionando do
    		f = false;
    		unless failed then Falha
    
    	state Falha do
    		f = true;
    		unless recover then Funcionando
		
		end
	tel

node lightBulb (sw: bool ) returns (light : bool )
	let
	  automaton
	  
	    state Off do
	      light = false ;
	      unless sw then On
	      
	    state On do
	      light = true ;
	      unless not sw then Off
	  
	  end
	tel

node bulbSystem(sw, fail, recovery : bool) returns( light, failed : bool)
	let
		light = inlined lightBulb (sw);
		failed = inlined fail (fail, recovery);	
	tel

node controller ( fail1, fail2, recovery1, recovery2 : bool ) returns ( failed1, failed2, light1, light2 : bool)
	contract
		var
			regra0, regra1: bool;
		let
			regra0 = not (failed1) or (not light1);
			regra1 = not (failed2) or (not light2);
		tel
		enforce regra0 & regra1
		with (c1, c2 : bool)

let
	(light1, failed1) = inlined bulbSystem (c1, fail1, recovery1);
	(light2, failed2) = inlined bulbSystem (c2, fail2, recovery2)
tel	