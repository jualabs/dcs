node failure(failed, recover : bool) returns (f : bool)
let
  automaton
    state Funcionando do
      f = false;
      unless failed then Falha
    state Falha do
      f = true;
      unless recover then Funcionando
  end
tel

node lightBulb ( sw, c1, c2 : bool ) returns (light : bool )
let
  automaton
    state Off do
      light = false;
      unless (sw & c2) or not c1 then On
    state On do
      light = true;
      unless (sw & c1) or not c2 then Off
  end
tel

node bulbSystem(sw, c1, c2, fail, recovery : bool) returns(light, failed : bool)
let
  light = inlined lightBulb (sw, c1, c2);
  failed = inlined failure(fail, recovery);	
tel

node controller ( sw1, sw2, fail1, fail2, recovery1, recovery2 : bool ) returns ( failed1, failed2, light1, light2 : bool)
contract
  var
    regra0, regra1, regra2: bool;
  let
    regra0 = not failed1 or not light1;
	regra1 = not failed2 or not light2;
	regra2 = light1 or light2
  tel
  assume not (failed1 & failed2)
  enforce regra0 & regra1 & regra2
    with (c11, c12, c21, c22 : bool)
let
	(light1, failed1) = inlined bulbSystem (sw1, c11, c12, fail1, recovery1);
	(light2, failed2) = inlined bulbSystem (sw2, c21, c22, fail2, recovery2);
tel	